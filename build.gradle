
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
  }
}

plugins {
  id 'java'
  id 'checkstyle'
  id 'application'
  id 'idea'
  id 'jacoco'
  id 'com.github.kt3k.coveralls' version '2.8.2'
  id "org.sonarqube" version "2.7"
}

group = 'cn.hjmao.leetcode'
version = '0.0.1-SNAPSHOT'

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
//  compile(
////    ['com.squareup.okhttp3:okhttp:3.14.1'],
////    ['org.jsoup:jsoup:1.11.3'],
////    ['org.json:json:20180813'],
////    ['org.slf4j:slf4j-api:1.7.26'],
//    ['org.apache.logging.log4j:log4j-api:2.17.2'],
//    ['org.apache.logging.log4j:log4j-core:2.17.2']
//  )

  implementation 'com.squareup.okhttp3:okhttp:3.14.1'
  implementation 'org.jsoup:jsoup:1.11.3'
  implementation 'org.json:json:20180813'
  implementation 'org.slf4j:slf4j-api:1.7.26'

  implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.29'


  implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
  implementation 'org.apache.logging.log4j:log4j-core:2.17.2'

  testImplementation group: 'org.testng', name: 'testng', version: '7.5'
  testImplementation 'org.mockito:mockito-core:2.27.0'
//  testCompile(
//    ['org.testng:testng:6.14.3'],
//    ['org.mockito:mockito-core:2.27.0']
//  )
}

sourceSets {
  main {
    runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
  }
  test {
    runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
  }
}

compileJava {
  options.compilerArgs << '-Xlint:unchecked'
}

//checkstyle {
//  toolVersion = '6.19'
////  configDir = file("$rootProject.projectDir/config/checkstyle")
//}

test {
  useTestNG() {
    useDefaultListeners = true
  }
  testLogging {
    events "failed" //, "passed", "skipped", "standardOut", "standardError"
    afterSuite { desc, result ->
      if (!desc.parent) {
        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
  }
}

//jacocoTestReport {
//  reports {
//    xml.enabled = true
//  }
//  afterEvaluate {
////    getClassDirectories().setFrom(
//    classDirectories = files(classDirectories.files.collect {
//      fileTree(dir: it, excludes: ['**/com/leetcode/**', 'src/main/java/cn/hjmao/ProblemFetcher*'])
//    })
////    )
//  }
//}

coveralls {
  jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}

sonarqube {
  properties {
    property 'sonar.projectKey', 'huajianmao_leetcode'
    property 'sonar.organization', 'huajianmao-github'
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.login', '811822b24c24fed7a4ed2cab65db600c7844b1cb'
    property 'sonar.exclusions', 'src/main/java/com/leetcode/**/*, src/main/java/cn/hjmao/ProblemFetcher*'
    property 'sonar.jacoco.reportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
  }
}
mainClassName = group + ".Main"
